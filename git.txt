Система контроля версий (Version Control Systems, VCS) — это система, сохраняющая изменения в одном или нескольких файлах
так, чтобы потом можно было восстановить определённые старые версии.

git --version
git --help

git init 
- создание репозитория

git status

git add -A
	-A или --all 
		- все файлы, которые находятся в папке и во всех подпапках
	main.py 
		- только этот документ
	. 
		- все файлы, которые находятся в папке
		
git status

git config --global user.name 'new user'
git config --global user.email 'test@mail.ru'

git commit -m "first commit"

.gitignore

folder
	file.txt
text.txt

git branch
- просмотр веток
git branch test
- создание новой ветки
git branch -D test

git branch readme
git checkout readme

readme.md

git checkout master

git merge readme 
 - слияние веток
 
git branch -D readme

token

WIN + R => contor

Диспечер учетных данных
Учетные данные Windows


https://github.com

git remote add origin https://github.com/Helen-prog/Python327.git

git push -u origin master


1) git add .
2) git commit -m "dz"
3) git push

git clone https://github.com/Helen-prog/Python327.git
- клонирование репозитория


d -> 1
k -> 2

git pull


https://ru.wordpress.org/plugins/browse/blocks/
https://ru.wordpress.org/plugins/browse/blocks/page/2/
https://ru.wordpress.org/plugins/browse/blocks/page/3/

https://ru.wordpress.org/plugins/browse/blocks/page/24/


parse_site.py

https://www.ixbt.com/live/index/news/
https://www.ixbt.com/live/index/news/page2/
https://www.ixbt.com/live/index/news/page3/





MVC — это шаблон программирования, который позволяет разделить логику
приложения на три части:
• Model (модель). Получает данные от контроллера, выполняет необходимые
операции и передаёт их в вид.
• View (вид или представление). Получает данные от модели и выводит
их для пользователя.
• Controller (контроллер). Обрабатывает действия пользователя, проверяет
полученные данные и передаёт их модели.


articles
	project_articles.py
	controller.py
	view.py
	model.py
	

http://127.0.0.1:5000/
templates
	index.html
	blog.html
	
view.py


SQLite

*.db, *.db3, *sqlite, *.sqlite3, *.sdb

profile.db

DISTINCT - для выборки уникальных значений

SELECT [ALL | DISTINCT] {*|столбец_1[, столбец_2]}
FROM таблица_1 [, таблица_2]
[WHERE условие] AND OR
	=, <>, !=, >, >=, <, <=
	выражение [NOT] BETWEEN начальное_значение AND конечное_значение
	выражение [NOT] LIKE шаблон_строки
		% - любое кол-во символов
		_ - один любой символ
	выражение [NOT] GLOB регулярное_выражение
		* - соответствует любому кол-ву повторений
		. - соответствует одному любому символу
		? - соответствует одному символу
		[abc] - соответствует любому символу из списка символов внутри скобок
		[a-zA-Z0-9]
		[^0-9] - все кроме заданных символов (диапазона)
	IS [NOT] NULL
	выражение [NOT] IN (набор значений | выражение)
	EXISTS (TRUE/FALSE)
	
GROUP BY (группировать по)
HAVING (условие)
ORDER BY столбец_1 | номер_столбца [ASC | DESC] [, столбец_2 ...] 	


LIMIT кол-во_строк OFFSET смещение
LIMIT [смещение,] кол-во_строк


INSERT INTO имя_таблицы [(столбец_1[, столбец_2])]
VALUES (значение_1[, значение_2])	
		
		
INSERT INTO имя_таблицы [(вставляемый_список_столбцов)]
SELECT список столбцов
FROM список_таблиц
WHERE условие


UPDATE имя_таблицы
SET столбец_1=значение_1, столбец_2=значение_2
[WHERE условие]

DELETE FROM имя_таблицы
[WHERE условие]
	

логическая база данных
физической базы данных


Функции агрегирования:
SUM - только с числовыми полями
AVG - только с числовыми полями
COUNT
MIN
MAX

Однострочные подзаросы (=, <, >, <>, >=, <=)
Многострчные подзапросы (IN)

pip install sqlalchemy

pip install faker



create_database.py

models
	__init__.py
	database.py
	group.py
	lesson.py
	student.py
	

https://www.sqlalchemy.org/
Ознакомиться с SQLAlchemy


Jinja

pip install jinja2

cars = [
 {'model': 'Audi', 'price': 23000},
 {'model': 'Skoda', 'price': 17300},
 {'model': 'Renault', 'price': 44300},
 {'model': 'Wolksvagen', 'price': 21300}
]


persons = [
 {"name": "Алексей", "year": 18, "weight": 78.5},
 {"name": "Никита", "year": 28, "weight": 82.3},
 {"name": "Виталий", "year": 33, "weight": 94.0}
]

shablon
	index.html
	
	header.html
	main.html
	footer.html
	dialog.html
	
	page.html
	about.html
	

pip install Flask

http://127.0.0.1:5000/profile/admin

int - должны присутствовать только цифры
float - вещественные числа
path - любые допустимые символы для указания пути + "/"


templates
	index.html
	about.html
	base.html
	contact.html
	
	
http://127.0.0.1:5000/contact?username=admin&email=admin%40gmail.com&message=New+message
http://127.0.0.1:5000/contact
	

