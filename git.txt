Система контроля версий (Version Control Systems, VCS) — это система, сохраняющая изменения в одном или нескольких файлах
так, чтобы потом можно было восстановить определённые старые версии.

git --version
git --help

git init 
- создание репозитория

git status

git add -A
	-A или --all 
		- все файлы, которые находятся в папке и во всех подпапках
	main.py 
		- только этот документ
	. 
		- все файлы, которые находятся в папке
		
git status

git config --global user.name 'new user'
git config --global user.email 'test@mail.ru'

git commit -m "first commit"

.gitignore

folder
	file.txt
text.txt

git branch
- просмотр веток
git branch test
- создание новой ветки
git branch -D test

git branch readme
git checkout readme

readme.md

git checkout master

git merge readme 
 - слияние веток
 
git branch -D readme

token

WIN + R => contor

Диспечер учетных данных
Учетные данные Windows


https://github.com

git remote add origin https://github.com/Helen-prog/Python327.git

git push -u origin master


1) git add .
2) git commit -m "dz"
3) git push

git clone https://github.com/Helen-prog/Python327.git
- клонирование репозитория


d -> 1
k -> 2

git pull


https://ru.wordpress.org/plugins/browse/blocks/
https://ru.wordpress.org/plugins/browse/blocks/page/2/
https://ru.wordpress.org/plugins/browse/blocks/page/3/

https://ru.wordpress.org/plugins/browse/blocks/page/24/


parse_site.py

https://www.ixbt.com/live/index/news/
https://www.ixbt.com/live/index/news/page2/
https://www.ixbt.com/live/index/news/page3/





MVC — это шаблон программирования, который позволяет разделить логику
приложения на три части:
• Model (модель). Получает данные от контроллера, выполняет необходимые
операции и передаёт их в вид.
• View (вид или представление). Получает данные от модели и выводит
их для пользователя.
• Controller (контроллер). Обрабатывает действия пользователя, проверяет
полученные данные и передаёт их модели.


articles
	project_articles.py
	controller.py
	view.py
	model.py
	

http://127.0.0.1:5000/
templates
	index.html
	blog.html
	
view.py


SQLite

*.db, *.db3, *sqlite, *.sqlite3, *.sdb

profile.db

DISTINCT - для выборки уникальных значений

SELECT [ALL | DISTINCT] {*|столбец_1[, столбец_2]}
FROM таблица_1 [, таблица_2]
[WHERE условие] AND OR
	=, <>, !=, >, >=, <, <=
	выражение [NOT] BETWEEN начальное_значение AND конечное_значение
	выражение [NOT] LIKE шаблон_строки
		% - любое кол-во символов
		_ - один любой символ
	выражение [NOT] GLOB регулярное_выражение
		* - соответствует любому кол-ву повторений
		. - соответствует одному любому символу
		? - соответствует одному символу
		[abc] - соответствует любому символу из списка символов внутри скобок
		[a-zA-Z0-9]
		[^0-9] - все кроме заданных символов (диапазона)
	IS [NOT] NULL
	выражение [NOT] IN (набор значений | выражение)
	EXISTS (TRUE/FALSE)
	
GROUP BY (группировать по)
HAVING (условие)
ORDER BY столбец_1 | номер_столбца [ASC | DESC] [, столбец_2 ...] 	


LIMIT кол-во_строк OFFSET смещение
LIMIT [смещение,] кол-во_строк


INSERT INTO имя_таблицы [(столбец_1[, столбец_2])]
VALUES (значение_1[, значение_2])	
		
		
INSERT INTO имя_таблицы [(вставляемый_список_столбцов)]
SELECT список столбцов
FROM список_таблиц
WHERE условие


UPDATE имя_таблицы
SET столбец_1=значение_1, столбец_2=значение_2
[WHERE условие]

DELETE FROM имя_таблицы
[WHERE условие]
	

логическая база данных
физической базы данных


Функции агрегирования:
SUM - только с числовыми полями
AVG - только с числовыми полями
COUNT
MIN
MAX

Однострочные подзаросы (=, <, >, <>, >=, <=)
Многострчные подзапросы (IN)

pip install sqlalchemy

pip install faker



create_database.py

models
	__init__.py
	database.py
	group.py
	lesson.py
	student.py
	

https://www.sqlalchemy.org/
Ознакомиться с SQLAlchemy


Jinja

pip install jinja2

cars = [
 {'model': 'Audi', 'price': 23000},
 {'model': 'Skoda', 'price': 17300},
 {'model': 'Renault', 'price': 44300},
 {'model': 'Wolksvagen', 'price': 21300}
]


persons = [
 {"name": "Алексей", "year": 18, "weight": 78.5},
 {"name": "Никита", "year": 28, "weight": 82.3},
 {"name": "Виталий", "year": 33, "weight": 94.0}
]

shablon
	index.html
	
	header.html
	main.html
	footer.html
	dialog.html
	
	page.html
	about.html
	

pip install Flask

http://127.0.0.1:5000/profile/admin

int - должны присутствовать только цифры
float - вещественные числа
path - любые допустимые символы для указания пути + "/"


templates
	index.html
	about.html
	base.html
	contact.html
	
	
http://127.0.0.1:5000/contact?username=admin&email=admin%40gmail.com&message=New+message
http://127.0.0.1:5000/contact
	
flash(message, category="message")
get_flashed_messages()

import os
os.urandom(20).hex()

from flsk.flsite import create_db
create_db()

FDataBase.py


http://127.0.0.1:5000/post/1
http://127.0.0.1:5000/post/2
http://127.0.0.1:5000/post/framework-flask-intro

tasks
	app.py
	static
		css
			style.css
	templates
		index.html
		base.html
		update.html
		

pip install flask-sqlalchemy


pip install django

django-admin startproject password_generator_project

python manage.py runserver
python manage.py runserver 1.2.3.4:4000

python manage.py startapp generator

python manage.py collectstatic

cd first
cd password_generator_project



http://127.0.0.1:8000/


templates
	generator
		home.html
static
	css
		style.css
		
http://127.0.0.1:8000/?length=2

second
django-admin startproject personal_portfolio

python manage.py runserver

python manage.py startapp skills
python manage.py startapp blog

pip install Pillow


python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py changepassword admin(имя пользователя) (новый пароль)


skills
	static
		css
			style.css
	templates
		skills
			index.html
			base.html
blog
	templates
		blog
			blogs.html
			details.html
			

http://127.0.0.1:8000/blog/
http://127.0.0.1:8000/blog/1/

http://127.0.0.1:8000/admin/blog/blog/5/change/



third
django-admin startproject todos
python manage.py startapp todo

todo
	templates
		todo
			signupuser.html
			currenttodos.html
			base.html
			
			
VnKTzKItCJvsbb7Iio3kgW3okplnoXpA5yXZmFn6WHyyroK31UaNeAw8sRPj1Vrp
aFIumvSsM1hU38lsprcNQMOxYMWCapqikQVA9qx56Zk0jlYN8XjgOqhh6eqyNns7	

python manage.py createsuperuser
		
		
		<div class="center">
 <h1>Система для обслуживания клиентов</h1>
 <p>Развивайте свой бизнес с помощью продвинутой, но простой в использовании платформы Upservice</p>
 <h2>Для чего нужен Upservice</h2>
 <p>Upservice – это платформа для контроля и управления вашим бизнесом.</p>
 <p>Помогает находить слабые стороны в работе сотрудников и улучшать уровень обслуживания клиентов.</p>
</div>

models.CASCADE - если пользователь будет удален, то удалятся все его задачи
models.PROTECTED - запрещает удалять пользователя, пока у него есть задачи
models.SET_NULL - задачи останутся в базе, даже при удалениии пользователя, но значение в поле задачи изменится на Null
models.SET_DEFAULT - задачи останутся в базе, даже при удалениии пользователя, но значение в поле задачи изменится на значение по умолчанию


forms.py


fourth
django-admin startproject devsearch
python manage.py startapp projects
python manage.py startapp users


projects
	templates
		projects
			projects.html
			base.html
			navbar.html
	static
		images
		styles
		uikit
users
	templates
		users
			index.html
			profile.html
	signals.py

		
		
ForeignKey - для связи один ко многим
ManyToManyField - для связи многие ко многим
OneToOneField - связь один к одному

Заполнить данные проектов с 3 по 9 (включительно)

python manage.py shell

from projects.models import Project

Project.objects.all()
Project.objects.get(id=1)
Project.objects.filter(id=1)			
Project.objects.filter(title__startswith="Website")			
Project.objects.filter(title__contains="site")			
Project.objects.filter(vote_total__gt=37)			
Project.objects.filter(vote_total__gte=37)			
Project.objects.exclude(title__startswith="Website")			

quit()

http://127.0.0.1:8000/admin/projects/project/8/change/